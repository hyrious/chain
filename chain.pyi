from typing import TypeVar

T = TypeVar("T")

class chain:
    def __init__(self, obj): ...
    def map(self, f) -> chain: ...
    def filter(self, f) -> chain: ...
    def to_list(self) -> chain: ...
    def to_tuple(self) -> chain: ...
    def to_set(self) -> chain: ...
    def print(self) -> None: ...
    # can add anything you want

"""
some explanations: 
since to_list() return a `list`, so it seems ought to be `-> list` instead of using `chain`
but use `-> chain` can cheat ide to auto completion.
"""

class It:
    def __init__(self, x="x") -> It: ...
    def __gt__(self, y) -> bool: ...
    def __lt___(self, y) -> bool: ...
    def __ge__(self, y) -> bool: ...
    def __le__(self, y) -> bool: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __add__(self, y: T) -> T: ...
    def __sub__(self, y: T) -> T: ...
    def __mul__(self, y: T) -> T: ...
    # add magic methods

it: It = It()

class Slot(It):
    pass

slot: Slot = Slot()

# this pyi is used to add auto completion
